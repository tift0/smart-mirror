//
// created by tift0 on 09.03.2025.
//

#pragma once

#include <BleServer.h>
#include <BleDevice.h>

#include "utilities/msg.hpp"

/*
 * @note:
 *		how to detect idevices?
 *			> first four bytes of BLE MAC address is '4c' @ stackoverflow
 */

namespace backend {
	// uuid generated by uuidgenerator.net
	const BLEUUID k_service_uuid{ "8d66aa30-a56d-48ed-a43e-ff892d390704" };
	const BLEUUID k_characteristic_uuid{ "deac586c-d95f-4d00-8f78-7ba335f80ad2" };

	bool m_con_state{};

	class c_server_callbacks final : public BLEServerCallbacks {
	public:
		void onConnect( BLEServer* server ) override {
			m_con_state = true;

			DBG( msg::pos, "idev connected" );
		}

		void onDisconnect( BLEServer* server ) override {
			m_con_state = false;

			DBG( msg::neg, "idev disconnected" );

			// idev disconnected => we need advertising again
			server->startAdvertising( );
		}
	};

	class c_characteristic_callbacks final : public BLECharacteristicCallbacks {
	public:
		// receiving msg from idev
		void onWrite( BLECharacteristic* charac ) override {
			const std::string& msg = charac->getValue( );
			DBG( msg::recv, "msg received: " + msg + "\n");
		}
	};

	class c_client {
	public:
		// getter of connection state
		static bool con_state( ) { return m_con_state; }

		static void init( const std::string& name ) {
			// init device
			BLEDevice::init( name );

			// create server + adding callback
			BLEServer* server = BLEDevice::createServer( );
			server->setCallbacks( new c_server_callbacks( ) );
			DBG( msg::pos, "server created" );

			// create service
			BLEService* service = server->createService( k_service_uuid );
			DBG( msg::pos, "service created" );

			// init characteristic
			BLECharacteristic* characteristic = service->createCharacteristic(
				k_characteristic_uuid, BLECharacteristic::PROPERTY_WRITE_NR
			);
			characteristic->setCallbacks( new c_characteristic_callbacks( ) );

			// start service
			service->start( );
			DBG( msg::pos, "service started" );

			// init advertisement
			BLEAdvertising*      adv = server->getAdvertising( );
			BLEAdvertisementData adv_data{};
			adv_data.setName( name );
			adv_data.setCompleteServices( BLEUUID( k_service_uuid ) );

			// set our final data
			adv->setAdvertisementData( adv_data );
			adv->setScanResponseData( adv_data );

			// start advertisement
			adv->start( );
			DBG( msg::pos, "server started advertisement" );
		}
	};

	extern c_client g_client{};
}
